{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome \ud83d\ude4c This documentation will guide you through how to set up a GitHub repository.  The goal of this documentation is to provide clear and easy instructions, ensuring that anyone regardless of their level of experience on GitHub can easily follow through this guide. In addition to the setup process, we will also focus on best practices while using a shell and a script that can automate common GitHub processes for you.</p> <p> GitHub is a web-based platform designed to streamline version control and collaboration for software development projects. Developers can efficiently manage and track changes in their code, foster collaboration with team members, and conveniently host their repositories online.</p> <p>Shell is a program where commands can be used to search for files and directories that are stored on the computer. The shell can also be used for a variety of tasks. In this documentation we will use the shell to run commands that will set up a repository on GitHub.</p>"},{"location":"#intended-users","title":"Intended Users","text":"<p>This documentation is intended for the following user groups:</p> <ul> <li>Beginners to intermediate developers aiming to set up and organize their projects.</li> <li>Software development teams working on crafting small to medium-sized web applications.</li> </ul>"},{"location":"#prerequisite-knowledge","title":"Prerequisite Knowledge","text":"<p>This documentations assumes the following:</p> <ul> <li>Comfort with terminal commands for basic operations.</li> <li>Knowing your way around a shell environment and terminal.</li> <li>Able to keep track of files and directories in the computer.</li> </ul>"},{"location":"#software-requirements","title":"Software Requirements","text":"<ul> <li>Visual Studio Code or any other code editor</li> <li>GitHub Account</li> <li>A Shell such as git bash for Windows and Linux or alternatively zsh.</li> </ul>"},{"location":"#procedures-overview","title":"Procedures Overview","text":"<p>The order in which to follow this documentation:</p> <ul> <li>Initialize Repository</li> <li>Using Repository</li> <li>Using Script</li> </ul>"},{"location":"#typographical-conventions","title":"Typographical Conventions","text":"<ul> <li>Some warning code blocks may have links on the bottom to the Troubleshooting page.</li> </ul> <p>Warning</p> <p>If you accidentally added the wrong remote URL, check out the troubleshooting section.</p> <ul> <li>The success message may display when a command has no output in the shell, to help confirm there is no error.</li> </ul> <p>Success</p> <p><code>git add .</code> will have no output, but it will prepare any changes you've made in the repository to be pushed to remote.</p> <ul> <li>Comments will contain terminology, each comment will contain the term with a link to the glossary. <p>term</p> </li> </ul>"},{"location":"#notes-and-warning-messages","title":"Notes and Warning Messages","text":"<p>In this documentation, message blocks will be used to inform you of important information. These message blocks are ranked in decending order of importance.</p> <p>Danger</p> <p>This is a danger message block.</p> <p>Make sure to pay close attention to the information provided here.</p> <p>Warning</p> <p>This is a warning message block.</p> <p>Please take the necessary precautions based on the information provided.</p> <p>Info</p> <p>This is an information message block.</p> <p>Pay attention to the details provided here for additional information.</p> <p>Success</p> <p>This is a success message block.</p> <p> Celebrate! </p>"},{"location":"glossary/","title":"Glossary","text":"Term Definition cd The Change directory command is used to navigate between directories in a file system. git Git is a distributed version control system used to track changes in source code during software development. ls The List command is used to display a list of files and directories in the current directory. ls -a The List all directory command lists all files and directories in the current directory including files that are not displayed by default scuh as hidden files. local repository A copy of your Git repository that resides on the local computer, this contains all files, changes and commites of the project. remote repository A repository that is hosted on a remote server, such as GitHub. This is used as a location where developers can share changes and collaborate. repository The central location where files and resources are stored and managed.8 push Git command used to send local changes to a remote repository. It is used to upload changes made in the local repository to a remote repository. pull Git command used to fetch changes from a remote repository and merge them into the local repository. It is used to synchronize changes from a remote repository."},{"location":"initializeRepo/","title":"How to Initialize a Repository on GitHub","text":"<p>This section will focus on helping you initialize your GitHub repository. After you read this section, you will be able to setup a new GitHub repository for future projects.</p>"},{"location":"initializeRepo/#quick-usage","title":"Quick Usage","text":"<p>For those experienced in setting up repositories:</p> <pre><code>echo \"# example\" &gt;&gt; README.md\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin https://github.com/&lt;username&gt;/example.\ngit push -u origin main\n</code></pre>"},{"location":"initializeRepo/#setps-to-get-started","title":"Setps to get started","text":"<p>In the introduction, you created a GitHub account and now you will be using that account to initialize your GitHub repository. You will be using a shell that was mentioned in the introduction.</p>"},{"location":"initializeRepo/#create-a-new-repository","title":"Create a New Repository","text":"<ul> <li> <p>Click the <code>+</code> icon in the upper-right corner and select New repository.</p> </li> <li> <p>Or, go to https://github.com/new.</p> </li> </ul>"},{"location":"initializeRepo/#configure-your-repository","title":"Configure Your Repository","text":"<p>Fill out the details of your repository:</p> <ul> <li>Repository name: Choose a unique name that reflects your project.</li> <li>Visibility: Select whether the repository is Public or Private.</li> </ul>"},{"location":"initializeRepo/#create-the-repository","title":"Create the Repository","text":"<p>Click the <code>Create repository</code> button.</p>"},{"location":"initializeRepo/#navigate-to-the-source-directory-or-create-one","title":"Navigate to the Source Directory (or create one)","text":"<ol> <li> <p>Open Git Bash (or another shell, such as <code>zsh</code>, <code>sh</code>, <code>fish</code>, so on) and run <code>cd &lt;path name&gt;</code> to navigate to the source directory of your project. </p> <ul> <li>Example: <code>cd c:/users/user/bcit/comp1310/&lt;directory name&gt;</code></li> </ul> </li> <li> <p>If you do not have a source directory for your project, you can create one by running:</p> <ul> <li><code>mkdir &lt;folder name&gt;</code></li> <li>Make sure to <code>cd</code> into the directory after you create it</li> </ul> </li> </ol>"},{"location":"initializeRepo/#push-your-project-to-github","title":"Push Your Project to GitHub","text":"<p>If you have a local repository to push:</p>"},{"location":"initializeRepo/#initialize-repository","title":"Initialize Repository","text":"<p>Warning</p> <p>Make sure you are in the source directory of your project before running the next command. Failing to do so could hinder your conputers performance. If you made this mistake find a solution in the troubleshooting section.</p> <pre><code># Initialize your local directory as a Git repository\ngit init\n</code></pre> <p>Success</p> <p>You will know this command ran succesfully if you look at the Explorer in VScode and see a U beside the files. This means the files were added but they are Untracked by GitHub. </p> <p></p>"},{"location":"initializeRepo/#stage-new-files","title":"Stage New Files","text":"<pre><code># Add the files in your new local repository\n# The \".\" allows you to upload all files in your current working directory.\ngit add .\n</code></pre> <p>Success</p> <p>You will know this command ran succesfully if you look at the Explorer in VScode and see a A beside the files. This means the files were Added to the staging area.</p> <p></p>"},{"location":"initializeRepo/#commit-the-files-that-youve-staged-in-your-local-repository","title":"Commit the files that you've staged in your local repository","text":"<pre><code>git commit -m \"First commit\"\n</code></pre> <p>Success</p> <p>The feedback in the command line will indicate whether the command worked or not. This is what a succesful output looks like.</p> <pre><code>user@DellXPS MINGW64 ~/Term2/Comm/user-documentation (main)\n$ git commit -m \"write a meaningful commit message\"\n[main 82a23ad] write a meaningful commit message\n1 file changed, 1 insertion(+)\n</code></pre> <p>Warning</p> <p>if you see the following output:     <pre><code>*** Please tell me who you are.\n\nRun\n\ngit config --global user.email \"you@example.com\"\ngit config --global user.name \"Your Name\"\n\nto set your account's default identity.\nOmit --global to set the identity only in this repository.\n</code></pre> It's likely you haven't used git before. See troubleshooting for details.</p>"},{"location":"initializeRepo/#add-remote-origin","title":"Add Remote Origin","text":"<pre><code># Add the URL for the remote repository\ngit remote add origin &lt;REMOTE_URL&gt;\n</code></pre> <p>Remote Url</p> <p>You Remote Url is located in your GitHub repository. Copy and paste it into the command below.</p> <p></p> <p>Warning</p> <p>If you accidentally added the wrong remote URL, check out the troubleshooting section. </p>"},{"location":"initializeRepo/#push-changes-to-github","title":"Push Changes to GitHub","text":"<pre><code># Push the changes in your local repository to GitHub\ngit push -u origin master\n</code></pre> <p>Master or Main</p> <p>If the command below does not work for you, replace <code>master</code> with <code>main</code> and try again.</p> <p>Success</p> <p> Congrats! Your project is now in GitHub.  </p>"},{"location":"initializeRepo/#conclusion","title":"Conclusion","text":"<p>In this section, you have learned how to:</p> <ul> <li>Create a new GitHub repository</li> <li>Navigate to the directory on you computer</li> <li>Initialize your project with GitHub</li> <li>Add, commit and push your project to the GitHub repository</li> </ul> <p>Nice work!  You can now move onto the next section, How to use your repository.</p>"},{"location":"troubleshooting/","title":"Troubleshooting Guide","text":"<p>This section aims to help you quickly identify and resolve common issues you might face. Each problem is described along with its probable cause and a step-by-step solution to help you resolve the issue efficiently.</p>"},{"location":"troubleshooting/#computer-feels-slower-than-usual","title":"Computer feels slower than usual","text":"<p>If you notice that your computer is running slower than usual, it might be due to accidentally initializing a Git repository by running <code>git init</code> in a directory with a large number of files or the root folder on your computer. Here's how you can diagnose and fix this issue:</p>"},{"location":"troubleshooting/#recommended-solution","title":"Recommended solution","text":"<ol> <li><code>cd path/to/your/directory</code> into the folder that you mistakenly ran <code>git init</code></li> <li>run <code>rmdir /s .git</code> on Windows or <code>rm -rf .git</code> on macOS or Linux</li> </ol>"},{"location":"troubleshooting/#wrong-remote-url","title":"Wrong Remote Url","text":"<p>If you've mistakenly added the wrong remote origin URL when setting up your GitHub repository, you might not be able to push your commits to your repository.</p>"},{"location":"troubleshooting/#recommended-solution_1","title":"Recommended solution","text":"<ol> <li>Run <code>git remote -v</code> to confirm that you entered the incorrect remote URL</li> <li>Run <code>git remote set-url origin new_url</code> with your updated URL</li> <li>Run <code>git remote -v</code> to confirm your remote URL has been updated</li> </ol>"},{"location":"troubleshooting/#pushing-without-fetching-changes","title":"Pushing Without Fetching Changes","text":"<p>Attempting to push your work to GitHub without first fetching and pulling the changes can lead to conflicts especially when you are working with other people.</p>"},{"location":"troubleshooting/#recommended-solution_2","title":"Recommended Solution","text":"<ol> <li>Run <code>git config pull.rebase false</code> to configure Git to merge the changes from the remote branch into your local branch</li> <li>Run <code>git pull</code> to pull the change on your computer</li> <li>Run <code>git push</code></li> </ol> <p>Success</p> <p>The feedback in the command line will indicate whether the command worked or not. This is what a succesful output looks like.</p> <pre><code>  Merge made by the 'ort' strategy.\n  docs/troubleshooting.md | 24 +++++++++++++++++++++---\n  mkdocs.yml | 4 ++++\n  2 files changed, 25 insertions(+), 3 deletions(-)\n</code></pre>"},{"location":"troubleshooting/#navigating-to-directory-using-cd-and-ls","title":"Navigating to directory using <code>cd</code> and <code>ls</code>","text":"<p>If you're encountering difficulties using cd (change directory) and ls (list directory contents) to navigate to your desired location, check the solution below.</p>"},{"location":"troubleshooting/#recommended-solution_3","title":"Recommended Solution","text":"<ol> <li>Running <code>ls</code> will show you all the contents that are inside the current directory you're in. That means that when you run <code>cd</code>, it needs to be followed by one of the items listed by the <code>ls</code> command.</li> <li>If the <code>ls</code> command does not list any content that can you want to <code>cd</code> into, you may need to run <code>cd ..</code> to go back to the parent folder.</li> <li>Run <code>pwd</code> (print working directory) to show the path to the directory that you are currently located in</li> </ol> <p>Info</p> <p>Pressing <code>tab</code> while writing a <code>cd</code> command will auto-complete the path name for you.</p> <p>Example - Press <code>tab</code> with <code>cd m</code> will auto-complete to <code>cd my-bcit-notes</code> if there are no naming conflicts.</p>"},{"location":"troubleshooting/#missing-credentials","title":"Missing credentials","text":"<p>If git is repeatedly asking you to enter a username or password, or it complains that it doesn't know who you are when commiting to your notes repository, we need to do some additional setup.</p>"},{"location":"troubleshooting/#recommended-solution_4","title":"Recommended Solution","text":"<pre><code># Run the following commands to set up your identity\n\ngit config --global user.email \"you@example.com\"\ngit config --global user.name \"Your Name\"\n</code></pre> <p>This will make sure your commit command can run correctly. Then:</p> <pre><code># Run the following command to automatically save your username and password\n# when using git.\ngit config --global credential.helper store\n</code></pre> <p>This will stop GitHub from asking for your credentials everytime you run a pull or push command, as well as letting your git related scripts run without trouble.</p>"},{"location":"useRepo/","title":"How to use your repository","text":""},{"location":"useRepo/#overview-and-theory","title":"Overview and theory","text":"<p>GitHub will be acting as a central backup to sync all of your school related projects, notes and materials you will collect throughout the program.</p> <p>There are two places your notes will exist, your local and remote repositories.</p> <ul> <li> <p>Your local repository will store any of the changes and work on your   local computer.</p> </li> <li> <p>The remote repository is where we will save backups and changes to keep   things synced across your different devices, and is found on GitHub.</p> </li> </ul> <p>Info</p> <p>Although we will be using GitHub for this guide, one could choose to use GitLab or any alternative Git repository. One could potentially host their own repository if they'd like, but that will be outside the scope of this guide.</p> <p>Whenever you are edititing your notes, we need to follow the following high level procedure:</p> <ol> <li>Syncing and updating your local with remote - pulling changes</li> <li>Updating your remote with new changes from your local - pushing changes</li> </ol> <p>By making sure we always pull any changes from our other devices onto our local device before we start any work, and that we push what we've done when we finish working, we'll make sure our notes are seamlessly synced across our devices.</p>"},{"location":"useRepo/#directory-structure-recommendations","title":"Directory structure recommendations","text":"<p>If you have your own organizational system for your notes folders, feel free to skip this section.</p> <p>When starting out the program or any large project, it can be tempting to setup your folders pre-emptively based on the classes and assignments you will have.</p> <p>Our recommendation is that you add folders for notes, labs and assignments only when you will be adding new files to them.</p> <p>We recommend this approach for two reasons:</p> <ol> <li>Git will not keep track of empty folders. Tracking an empty folder like    this is possible by adding a hidden \".gitkeep\" file to each, but this    can be come cumbersome quickly. </li> <li>You may find that your notes become difficult to navigate and keep    track with Git if a large amount of files are present at all times. To    learn how to use this new system, it is best that things are kept as    simple as possible initially.</li> </ol>"},{"location":"useRepo/#pulling-changes-from-remote","title":"Pulling changes from remote","text":"<p>Let's assume you've worked on a project under <code>notes/intro-to-programming/project.js</code> in class and you would like to continue working on it from home.</p> <p>Logging onto your home computer, we would do the following steps before we begin work:</p>"},{"location":"useRepo/#navigate-to-your-repository","title":"Navigate to your repository","text":"<ol> <li>Open up your terminal, running bash or a shell equivalent.</li> <li>Navigate to your notes directory. Your shell should look something like: <code>$ path/to/your/notes (main)</code></li> </ol> <p>Info</p> <p>You can use a combination of <code>ls</code> and <code>cd</code> to change into your notes directory, but this is outside the scope of this guide.</p> <p>Warning</p> <p>See troubleshooting if you're having trouble navigating to your notes directory.</p>"},{"location":"useRepo/#check-for-new-changes-on-remote-using-fetch","title":"Check for new changes on remote using fetch","text":"<ol> <li>Run <code>git fetch</code></li> </ol> <p>Info</p> <p><code>git fetch</code> may have no output. This will happen if there are no new changes and is normal. You can proceed to the next step in this case.</p> <p>Success</p> <p>The following is an example of success output of the <code>git fetch</code>  command if new changes were found on the remote repository: <pre><code>$ path/to/your/notes (main) git fetch\nremote: Enumerating objects: 13, done.\nremote: Counting objects: 100% (13/13), done.\nremote: Compressing objects: 100% (6/6), done.\nremote: Total 9 (delta 3), reused 9 (delta 3), pack-reused 0\nUnpacking objects: 100% (9/9), 2.93 KiB | 2.93 MiB/s, done.\nFrom https://github.com/your-username/notes\n   4a30534..37487b7  main       -&gt; origin/main\n</code></pre></p>"},{"location":"useRepo/#pull-your-newly-fetched-changes","title":"Pull your newly fetched changes","text":"<p>Info</p> <p><code>git pull</code> may output:  <code>Already up to date</code> This signifies that no changes were pulled from remote and you're all synced up.</p> <p>Success</p> <p>The following is an example of success output of the <code>git pull</code>  command if new changes were found on the remote repository: <pre><code>$ path/to/your/notes (main) git pull\nUpdating 7a32534..37eb7b7\nFast-forward\n intro-to-programming/project.js | 68 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n 1 file changed, 68 (+) insertions\n create mode 100644 docs/initializeRepo.md\n</code></pre></p> <p>You're good to go! Once you finish working, make sure to follow the Pushing changes to remote section of this guide to keep things synced up.</p>"},{"location":"useRepo/#pushing-changes-to-remote","title":"Pushing changes to remote","text":"<p>Let's assume you've finished working on a project <code>notes/intro-to-programming/project.js</code> at home and would like to make sure you sync up your progress for the next time you work on it in class.</p> <p>Logging onto your home computer, we would do the following steps before we begin work:</p>"},{"location":"useRepo/#navigate-to-your-repository_1","title":"Navigate to your repository","text":"<ol> <li>Open up your terminal, running bash or a shell equivalent.</li> <li>Navigate to your notes directory. Your shell should look something like: <code>$ path/to/your/notes (main)</code></li> </ol> <p>Info</p> <p>You can use a combination of <code>ls</code> and <code>cd</code> to change into your notes directory, but this is outside the scope of this guide.</p> <p>Warning</p> <p>See troubleshooting if you're having trouble navigating to your notes directory.</p>"},{"location":"useRepo/#consider-what-you-want-to-sync","title":"Consider what you want to sync","text":"<p>When using Git, we can specify what we would like Git to track using a <code>.gitignore</code> file. In a <code>.gitignore</code> file, we can specify a series of file paths. Any files found at these paths will be ignore by Git when you're adding your changes to remote.</p> <p>Warning</p> <p><code>.gitignore</code> is often used in order to keep our secrets, such as passwords and sensitive information secure by not adding them to GitHub. This is especially imporant when using a public repository, where anyone could see your notes.</p> <p>In most cases, you'd like to push everything in your repository. </p> <p>There are some cases where you may want to add files to your <code>.gitignore</code>.</p> <p>Since this should be a private repository, we can be less secure about our secrets and passwords, although it can be good practice to ignore them either way.</p> <p>It's also important that we add large files to our <code>.gitignore</code>. GitHub has a file size limit, and even if we aren't hitting the limit, syncing large videos and images can take an extremely amount of time.d</p> <p>Let's say we have a file <code>secrets.txt</code> where we store sensitive data, and it is located in at <code>notes/intro-to-programming/secrets.txt</code>.</p> <p>We also have a large video file <code>large-video.mp4</code> located at <code>notes/intro-to-programming/large-video.mp4</code>.</p> <p>Let's setup Git so that these files are ignored by default.</p> <ol> <li>Create a new .gitignore file at <code>notes/intro-to-programming/.gitignore</code></li> <li>In the .gitignore file, add the following: <pre><code>secrets.txt # sensitive data\nlarge-video.mp4 # too large!\n</code></pre></li> </ol> <p>Info</p> <p><code>.gitignore</code> files have multiple paths! Let's say we have a lot of secrets: <pre><code>secrets.txt \nlarge-video.mp4\nevenMoreSecrets.txt\ntooManySecrets.txt\n</code></pre></p> <p>Warning</p> <p>Although this protects these files from being on our repository, they won't be synced up across our different devices, as they won't be placed on our remote. For this reason, having a private repository can make secret handling much easier, but large files are still problematic.</p>"},{"location":"useRepo/#add-your-new-changes","title":"Add your new changes","text":"<p>At this point, it's good to have a mental checklist before we start adding and pushing our changes.</p> <ol> <li>Make sure you've pulled any changed from remote first. Git will not let    you continue otherwise. See the section pulling changes from    remote for details.</li> <li>You've considered if there's anything you'd like to keep secret, and    you <code>.gitignore</code> file is setup accordingly.</li> <li>We are in the right location in our terminal. We should be in the same    place as where you ran <code>git init</code> when first creating your    repository, or the place where you ran <code>git clone</code> to pull down    your repository onto a new computer.</li> </ol> <p>To add our changes and push them to remote, we can run the following commands:</p> <ol> <li> <p>Run <code>git add .</code></p> <p>Success</p> <p><code>git add .</code> will have no output, but it will prepare any changes  you've made in the repository to be pushed to remote. If you'd like to see some confirmation that this action succeded, run <code>git status</code> and look for Changes to be commited:</p> </li> <li> <p>Run <code>git commit -m \"some commit message\"</code></p> <p>Replace <code>\"some commit message\"</code> with something that describes the new changes.  Commit messages shine when working collaboratively, and may not be as useful in this context. </p> <p>Info</p> <p>In the using a script section we solve this commit message problem by automatically including a commit message based on the date.</p> </li> <li> <p>Run <code>git push</code>. Your changes should now be up to date with your local machine on      remote!</p> <p>Warning</p> <p>If you see the following output: <pre><code>git push\nTo https://github.com/your-username/notes\n ! [rejected]        main -&gt; main (fetch first)\nerror: failed to push some refs to 'https://github.com/your-username/notes.git\n</code></pre> You have forgotten to fetch and pull before adding notes or commiting them. This is okay and will happen often. See troubleshooting for help.</p> </li> </ol>"},{"location":"useRepo/#conclusion","title":"Conclusion","text":"<p>In this section you have learned how to:</p> <ul> <li>Pulling changes from remote</li> <li>Pushing changes to remote repository</li> <li>Navigating folders and directories</li> <li>Using Git commands </li> </ul> <p>Nice work! \u2705 You can now move onto the next section, Using a script to automate note syncing.</p>"},{"location":"usingScript/","title":"Using a script to automate note syncing","text":""},{"location":"usingScript/#overview-and-theory","title":"Overview and theory","text":"<p>Using this sytem for some time can expose some repetitive parts of git that aren't entirely useful for keeping track of notes.</p> <p>Many of the following features of git make sense when working on code as a group, but that's not what we are using git for. Here are some of the potential friction points:</p> <ul> <li> <p><code>git add</code> can be useful for only adding select changes. In the context of  code, this can be a powerful feature. For our notes, however, it's likely we will  always add all our changes, making this step feel repetitive.</p> </li> <li> <p><code>git commit -m \"some message\"</code> is a crucial feature when working as a group so that other developers can keep track of what was changed when. When working alone, on a  non-technical project such as school notes, it can become an annoying feature that is barely used.</p> </li> <li> <p>Forgetting to fetch before working on notes sucks. It can cause you to rewrite notes, and oftentimes will lead to merge conflicts. We detail how to deal with these in our troubleshooting section, but it would be nice if we could avoid this headache all together.</p> </li> </ul> <p>We'll use a script that will automate the entire pulling and pushing process for us, avoiding most of these headaches, and keeping the system easy to use. The script will vary depending on your system. See the Windows or Mac/Linux sections below according to your operating system.</p>"},{"location":"usingScript/#windows","title":"Windows","text":"<p>Here is the script. Copy the following code: <pre><code>@echo off\nREM Navigate to the notes directory\ncd C:\\Path\\To\\vaults\\notes\n\nREM Fetch the latest changes from the remote repository\ngit fetch origin\n\nREM Pull the latest changes\ngit pull origin main\n\nREM Add all new and changed files to the commit\ngit add .\n\nREM Commit the changes with the current date as the message\nfor /f \"tokens=1-5 delims=/ \" %%d in (\"%date%\") do set Date=%%f-%%e-%%d\nfor /f \"tokens=1-5 delims=: \" %%a in (\"%time%\") do set Time=%%a-%%b\ngit commit -m \"auto backup: %Date% %Time%\"\n\nREM Push the commit to the remote repository\ngit push origin main\n</code></pre></p> <ol> <li> <p>Replace <code>C:\\Path\\To\\vaults\\notes</code> with the actual path to your notes directory.</p> </li> <li> <p>Save this script as a <code>.bat</code> file, for example, <code>update_notes.bat</code>.</p> </li> <li> <p>Run this script whenever you start and finish work by double clicking the <code>.bat</code> file. This should automatically get you synced up with the remote repository with a single click.</p> </li> </ol>"},{"location":"usingScript/#maclinux","title":"Mac/Linux","text":"<p>Here is the script. Copy the following code:</p> <pre><code>#!/bin/bash\n\n# Navigate to the notes directory\ncd /path/to/your/notes\n\n# Fetch the latest changes from the remote repository\ngit fetch origin\n\n# Pull the latest changes\ngit pull origin main\n\n# Add all new and changed files to the commit\ngit add .\n\n# Commit the changes with the current date as the message\nDATE=$(date +'%Y-%m-%d %H:%M:%S')\ngit commit -m \"auto backup: $DATE\"\n\n# Push the commit to the remote repository\ngit push origin main\n</code></pre> <ol> <li> <p>Replace <code>/path/to/your/notes</code> with the actual path to your notes directory.</p> </li> <li> <p>Save this script to a file, for example, <code>update_notes.sh</code>.</p> </li> <li> <p>Making sure you're in your notes directory, make it executable: <code>chmod +x update_notes.sh</code></p> </li> <li> <p>Making sure you're in your notes directory, running <code>./update_notes.sh</code> should get you synced up with the remote repository in a single command.</p> <p>Warning</p> <p>This script assumes that you're using <code>bash</code> as your terminal shell.  You can change the path from <code>#!/bin/bash</code> to <code>#!/bin/zsh</code> for MacOS if you're using <code>zsh</code>.</p> </li> </ol>"},{"location":"usingScript/#conclusion","title":"Conclusion","text":"<p>In this section you have learned how to:</p> <ul> <li>Automate Git commands in order to push local to repository<ul> <li>For Windows, MacOS and Linux   </li> </ul> </li> </ul> <p>Congrats, you made it through! \u2705</p>"}]}